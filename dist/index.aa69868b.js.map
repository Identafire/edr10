{"mappings":"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","sources":["src/js/main.js"],"sourcesContent":["//open switch\n\nfunction clickToOpen() {\n  $('#mainNav').toggleClass('close');\n  $('#mainNav').toggleClass('open');\n};\n\n//arrows\n\n// Enhanced scroll detection script that works with both IDs and classes\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Configuration object for elements to observe\n  const elementsConfig = [\n    // Example with ID\n    {\n      selector: 'heroArrowOne', // ID without # prefix\n      type: 'id',\n      onEnter: (element, selector) => {\n        element.classList.add('visible','slide-in-bounce');\n        element.classList.remove('invisible');\n      },\n      onExit: (element, selector) => {\n        null\n      }\n    },\n    {\n      selector: 'heroArrowTwo', // ID without # prefix\n      type: 'id',\n      onEnter: (element, selector) => {\n        element.classList.add('visible','slide-in-bounce-slow');\n        element.classList.remove('invisible');\n      },\n      onExit: (element, selector) => {\n        null\n      }\n    },\n    {\n      selector: 'heroArrowOneMob', // ID without # prefix\n      type: 'id',\n      onEnter: (element, selector) => {\n        \n        element.classList.add('visible','slide-in-bounce');\n        element.classList.remove('invisible');\n      },\n      onExit: (element, selector) => {\n        null\n      }\n    },\n    {\n      selector: 'heroArrowTwoMob', // ID without # prefix\n      type: 'id',\n      onEnter: (element, selector) => {\n        \n        element.classList.add('visible','slide-in-bounce-slow');\n        element.classList.remove('invisible');\n      },\n      onExit: (element, selector) => {\n        null\n      }\n    },\n    // Example with class\n    {\n      selector: 'fadeIn', // Class without . prefix\n      type: 'class',\n      onEnter: (element, selector) => {\n        \n        element.classList.add('fade-in','visible');\n        element.classList.remove('invisible');\n      },\n      onExit: (element, selector) => {\n        null\n      }\n    },\n    {\n      selector: 'slideIn', // Class without . prefix\n      type: 'class',\n      onEnter: (element, selector) => {\n        \n        element.classList.add('visible','slide-in-bounce');\n        element.classList.remove('invisible');\n      },\n      onExit: (element, selector) => {\n        null\n      }\n    }\n    // Add more configurations as needed\n  ];\n\n  // Create an Intersection Observer instance\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach(entry => {\n      // Find which configuration this element belongs to\n      const elementConfig = findConfigForElement(entry.target);\n      \n      if (!elementConfig) return; // Skip if no config found\n      \n      const selectorPrefix = elementConfig.type === 'id' ? '#' : '.';\n      const selectorName = '${selectorPrefix}${elementConfig.selector}';\n      \n      if (entry.isIntersecting) {\n        // Element has entered the viewport\n        if (typeof elementConfig.onEnter === 'function') {\n          // Check if the function expects two parameters\n          if (elementConfig.onEnter.length >= 2) {\n            elementConfig.onEnter(entry.target, selectorName);\n          } else {\n            // Original function only expects one parameter\n            elementConfig.onEnter(entry.target);\n          }\n        } else {\n          console.error('onEnter is not a function for element: ${selectorName}');\n          // Apply default behavior\n          entry.target.classList.add('visible');\n        }\n      } \n      }\n    );\n  }, {\n    root: null, // Use the viewport\n    rootMargin: '0px',\n    threshold: 0.1 // Trigger when at least 10% of the element is visible\n  });\n\n  // Helper function to find the matching configuration for an element\n  function findConfigForElement(element) {\n    return elementsConfig.find(config => {\n      if (config.type === 'id') {\n        return element.id === config.selector;\n      } else if (config.type === 'class') {\n        return element.classList.contains(config.selector);\n      }\n      return false;\n    });\n  }\n\n  // Start observing all configured elements\n  elementsConfig.forEach(config => {\n    let elements = [];\n    \n    try {\n      if (config.type === 'id') {\n        // Get element by ID\n        const element = document.getElementById(config.selector);\n        if (element) elements = [element];\n      } else if (config.type === 'class') {\n        // Get elements by class name\n        const collection = document.getElementsByClassName(config.selector);\n        if (collection && collection.length > 0) {\n          elements = Array.from(collection);\n        }\n      }\n      \n      const selectorPrefix = config.type === 'id' ? '#' : '.';\n      const selectorName = '${selectorPrefix}${config.selector}';\n      \n      if (elements.length === 0) {\n        console.warn('No elements found for ${selectorName}');\n      } else {\n        elements.forEach(element => {\n          if (element) {\n            observer.observe(element);\n            console.log(\"Now observing ${config.type === 'id' ? 'element with ID' : 'element with class'}: ${selectorName}\");\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error while setting up observation for ${config.type === 'id' ? '#' : '.'}${config.selector}:\", error);\n    }\n  });\n\n  // Utility functions\n  \n  // Add a new element to observe by ID\n  window.observeElementById = function(id, onEnterFn, onExitFn) {\n    if (!id) {\n      console.error('No ID provided to observeElementById');\n      return false;\n    }\n    \n    // Default functions if not provided\n    const onEnter = onEnterFn || function(el) {\n      console.log('Element #${id} has entered the viewport!');\n      el.classList.add('visible');\n    };\n    \n    const onExit = onExitFn || function(el) {\n      console.log('Element #${id} has left the viewport.');\n      el.classList.remove('visible');\n    };\n    \n    // Add to our configuration\n    const newConfig = {\n      selector: id,\n      type: 'id',\n      onEnter,\n      onExit\n    };\n    \n    elementsConfig.push(newConfig);\n    \n    // Start observing the new element\n    const element = document.getElementById(id);\n    if (element) {\n      observer.observe(element);\n      console.log('Now observing element with ID: #${id}');\n      return true;\n    } else {\n      console.error('Element with ID \"#${id}\" not found on the page.');\n      return false;\n    }\n  };\n  \n  // Add elements to observe by class\n  window.observeElementsByClass = function(className, onEnterFn, onExitFn) {\n    if (!className) {\n      console.error('No class name provided to observeElementsByClass');\n      return false;\n    }\n    \n    // Default functions if not provided\n    const onEnter = onEnterFn || function(el) {\n      console.log('Element .${className} has entered the viewport!');\n      el.classList.add('visible');\n    };\n    \n    const onExit = onExitFn || function(el) {\n      console.log('Element .${className} has left the viewport.');\n      el.classList.remove('visible');\n    };\n    \n    // Add to our configuration\n    const newConfig = {\n      selector: className,\n      type: 'class',\n      onEnter,\n      onExit\n    };\n    \n    elementsConfig.push(newConfig);\n    \n    // Start observing all elements with this class\n    const elements = document.getElementsByClassName(className);\n    if (elements.length > 0) {\n      Array.from(elements).forEach(element => {\n        observer.observe(element);\n      });\n      console.log('Now observing ${elements.length} element(s) with class: .${className}');\n      return true;\n    } else {\n      console.error('No elements with class \".${className}\" found on the page.');\n      return false;\n    }\n  };\n  \n  // Stop observing by selector (works with both IDs and classes)\n  window.stopObserving = function(selector, isClass = false) {\n    if (!selector) {\n      console.error('No selector provided to stopObserving');\n      return false;\n    }\n    \n    // Clean selector (remove # or . if present)\n    const cleanSelector = selector.replace(/^[#.]/, '');\n    const type = isClass ? 'class' : 'id';\n    const selectorPrefix = type === 'id' ? '#' : '.';\n    const formattedSelector = '${selectorPrefix}${cleanSelector}';\n    \n    let elements = [];\n    \n    if (type === 'id') {\n      const element = document.getElementById(cleanSelector);\n      if (element) elements.push(element);\n    } else {\n      elements = Array.from(document.getElementsByClassName(cleanSelector));\n    }\n    \n    if (elements.length === 0) {\n      console.error('No elements found for \"${formattedSelector}\"');\n      return false;\n    }\n    \n    // Stop observing these elements\n    elements.forEach(element => {\n      observer.unobserve(element);\n    });\n    \n    // Remove from our configuration array\n    for (let i = elementsConfig.length - 1; i >= 0; i--) {\n      if (elementsConfig[i].type === type && elementsConfig[i].selector === cleanSelector) {\n        elementsConfig.splice(i, 1);\n      }\n    }\n    \n    console.log(\"Stopped observing ${elements.length} element(s) with ${type === 'id' ? 'ID' : 'class'}: ${formattedSelector}\");\n    return true;\n  };\n});\n"],"names":[],"version":3,"file":"index.aa69868b.js.map","sourceRoot":"/__parcel_source_root/"}